HTML - Hyper Text Markup Language
CSS - Cascading Style Sheet
JavaScript - Programming Language
Bootstrap - CSS Framework

MERN - Stack
M  -  MongoDB  - DataBase (NoSQL)
E   -  ExpressJS  - Backend Framework
R   -  ReactJS      - Frontend Library
N   -  Node          - Runtime for JS


Heading tags: Varies on size
<h1></h1>
<h2></h2>
<h3></h3>
<h4></h4>
<h5></h5>
<h6></h6>

Paragraph tag : <p></p>

Lists: 
Ordered lists: <ol></ol>
Unordered lists: <ul></ul>

List items: <li></li>

<ol>
	<li>Apple</li>
	<li>Mango</li>
	<li>Orange</li>
</ol>


Anchor tag for navigation:
<a href="link">Something</a>

Image tag:
<img src="imagelink/location" height="200px" />

Container tag to create grouping: 
<div></div>

Table tag:
<table>
	<thead>
		<tr>
			<th></th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
		</tr>
	</tbody>
</table>

Form tag:
<form></form>

Input tag:
<input type="typename" />

input.value

label tag to label the input:
<label>Some text</label>

Example:
<label for="firstName">Name</label>
<input type="text" id="firstName" />


Semantic tags:
<header></header>
<nav></nav>

<main></main>
<section></section>

<footer></footer>

Formatting tags:
break : <br />
horizontal line : <hr />
text formatting:
bold : <b></b>
strong: <strong></strong>
italic: <i></i>



CSS - Cascading Style Sheet

Internal 
Inline
External


CSS Selectors:

Tag selector

tagname {
    property: value;
}


ID Selector

#id {
    property: value;
}

Class selector

.classname {
    property: value;
}

attribute selector

tagname[attribute: value] {
    property: value;
}

Pseudo Selector

selector:pseudo {
    property: value;
}


universal selectors

* {
    property: value;
}

Font properties:
font-family
font-size


1rem = 16px
2rem = 16px x 2 = 32px

font-weight
font-style

Text properties:
text-align
text-decoration
text-transform

height
width
color
background-color


Box Model:
margin - top, right, bottom, left
border - top, right, bottom, left
padding - top, right, bottom, left

border-radius - top, right, bottom, left


Flex:
display: flex
flex-direction: row/column
justify-content - main axis
align-items - opposite axis
flex-wrap
gap


Animation:
transition
animate
@keyframe name {
    0% {}
    100% {}
}


Responsive Design:

Mobile - (max-width: 576px)
Tablet - (max-width: 768px)
Laptop/Monitor) - other

@media (max-width: px) {
    selector {
        property: value;
    }
}



Bootstrap:

Utilities - One property will change
Components - Multiple properties will change









JavaScript (JS) :

Variables - holds memory address

var
let
const

Data Types:

Number
String
Boolean
Undefined
Null
Array - [ ]
Object - { }

let variablename = value;
const variablename = value;

const user =  { 
	property : value,
	username : "vvd",
	mobile: 123456789,
	address : "",
	hobbies : [ "movies", "music"]
}

const students = ["name","name2", "name3"]

students[0]
students[1]

user.username
user["username"]
user.mobile


let num = 10
const num = 10


Operators:

Arithmetic Operators - +, - , * , /, %, ++, --
Logical - &&, || , !
Relation Operator - <, >, <=, >=, !=, ==, !==, ===

2 == 2
2 == "2"

== ===
!= !==


2 + 2 = 4
2 + "2" = 4 



Assignment Operator - =, +=, -=, *=, /=, %=

Conditional Statements: 

if(condition) {
	// Some code for true block
} else {
	// Some code for false block
}



Ternary Operator -> (condition)? trueblock : falseblock


function name(num1, num2) {
	return num1 + num2
}

const name = (num1, num2) => {
       return num1 + num2
}


const addFunc = (num1, num2) => num1 + num2

DOM - Document Object Model

It is a tree like representation of the HTML page content. Includes all tags, attributes, text  content, etc.,

document.getElementById("id")
document.getElementsByClassName("classname") - HTMLCollection
document.getElementsByTagName("p") - HTMLCollection

document.querySelector("p")
document.querySelector(".classname")
document.querySelector("#id")

document.querySelectorAll()
document.querySelectorAll("p") - NodeList
document.querySelectorAll(".classname")

const heading = document.getElementById("heading1");
heading.textContent = "dvbaibvasv"

const paragraph = document.createElement("p")
paragraph.textContent = "Something"

heading.appendChild(paragraph)

heading.remove()



heading.style.color = "white"
heading.style.backgroundColor =  "blue"

// Adding class
heading.classList.add("classname")

// Remove class
heading.classList.remove("classname")

// Add if not exist and remove if exist
heading.classList.toggle("classname")





Events - actions user make in the website
Event Listeners - Listen for a specific event and execute a function

element.addEventListener("event", function)

element.addEventListener("click", () => {
	console.log("Element Clicked");
})

JS Engines:
Chrome - V8
Firefox - Spider Monkey
Safari - JavaScript Core
IE - Chakra

Runtime Environment:
NodeJS -> V8 + libuv(c++)
Deno
Bun

Commands:
node --version


CommonJS:
const newName = require("filename");
module.exports = name;

const {name, name1, name2} = require("filename");
module.exports = {name, name1, name2};

ESModule:
import name from "file";
export default name;

import {name, name1, name2} from "filename";
export const/let name...
export const/let name1...
export const/let name2...


Error Handling:

try {
	// Something that may give error
} catch(error) {
	// Handle error here
}





Async/await:

i) Function should be asynchronous
ii) Specific line should have await keyword

const fetchData = async () => {
	const response = await fetch("https://dummyjson.com/products")
	const data = await response.json() // convert json to object
	console.log(data)
}

const fetchData = async () => {
	try {
		const response = await fetch("https://fakestoreapi.com/products")
		const data = await response.json() // convert json to object
		console.log(data)
	} catch(error) {
		console.log("Error fetching data", error.message)
	}
}
fetchData()



ReactJS - Frontend Library

Features of React:
i) Declarative Programming
ii) Component based architecture
iii) Provides reusable components
iv) SPA - Single Page Application


Official Documentation - react.dev




Creating a React Project:

Using CRA:
npx create-react-app -> It is deprecated

Using Vite:
npm create vite projectname

npm create vite ecom-frontend
npm create vite .

npm install -> to install packages in package.json

npm install packagename -> to install any additional package

npm run dev -> to run the project



Components:
Dividing the page into multiple reusable components.
Components are nothing but functions in JavaScript.




Props - properties(data) passed to a component
Parent to child only - Uni-directional data flow








Hooks - functions already available in react.
All hooks starts with term "use".







State management - managing data inside a component
When state changes component will re-render.

A component will only re-render when state changes (or) parent is rendering.

useState - hook for state management in react component

useState hook needs a single parameter. That is the initial value of state.
useState will return an array, which have two things inside it. 
i) state
ii) state updating function

const [count, setCount] = useState(0);

state can have any name. But always name the state updating function with the term "set" before the state name.

setCount(1) - this will change the state to 1.








useEffect - creating side effects

3 Types:
i) Only execute when component is rendered for the first time(mounted)
ii) Only execute when dependency changes
iii) Execute on all renders


Type: 1

useEffect(() => {
// code
}, [ ])

Type: 2

useEffect(() => {
// code
}, [dependency])

Type: 3

useEffect(() => {
// code
})









useContext - Creating global state or app wide state

i) createContext
ii) using Provider component provide the data needed
iii) Wrap the components inside the provider
iv) get the data using useContext hook









Routing - Navigating between multiple pages.
Not available in react library. Need additional library

react-router-dom

npm install react-router-dom

<BrowserRouter>
    <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
        <Route path="*" element={<ErrorPage />} />
    </Routes>
</BrowserRouter>




<Link to="/url">Some Text</Link>

<NavLink
  to="/messages"
  className={({ isActive }) =>
    isActive ? "active" : ""
  }
>
  Messages
</NavLink>


const navigate = useNavigate()

navigate("/url")
navigate("/iphone-16")







Dynamic Routing using params:

<Route path="/products/:id" element={ } />

Inside the component you can get the id using useParams hook.

const { id } = useParams();

<Route path="/products/:productId" element={ } />
const { productId } = useParams();














Backend

Express for server - receive request and send response
MongoDB for database (mongoose) - store data

MongoDB Compass - GUI(Graphical User Interface) for DB
MongoDB Atlas - Cloud service for MongoDB 


Connection string - String used for connecting to the database



Create a folder with name as backend

Project creation command - npm init -y

npm install express mongoose dotenv jsonwebtoken bcryptjs cors

express - Backend server
mongoose - MongoDB ODM(Object Data Modelling)
dotenv - To use env files
jsonwebtoken - To create and verify JWT
bcryptjs - To encrypt password of user
cors - Cross Origin Resource Sharing used to allow frontend to access server

npm install -g nodemon

npm install -D nodemon


Server should run continuously in one port - 3000, 5000, 8000 use any one


REST API -  Representational state transfer
API gives data to frontend


CRUD Operations:

C - Create - Creating new data
R - Read - Fetch data from db
U - Update - Change or updating existing one
D - Delete - Removing data from db

HTTP Methods
Need to use in routes

Create - POST
Read - GET
Update - PUT, PATCH
Delete - DELETE


Status codes:

Starts from 100 to 500 series

200 series for success response
400 series for client errors
500 series for server errors

Most Used Status codes:

200 - Ok
201 - Created
204 - No Content
400 - Bad Request

401 - Unauthorized

403 - Forbidden

404 - Not Found
500 - Internal Server Error

Request response cycle:

Each request should get a response. It can be success or error response.
For each request, server should send only one response.

Middlewares:

Operations happening between the request-response cycle. No limit for middlewares.

Request Body:

Data can be only sent in request using the request body. There is no other option.
Data stored in request body will be in JSON type. Using a middleware we can convert it to object - express.json()


Naming the routes:

i) route names should be resource oriented only nouns

For example:

GET            /users          Get all users
GET            /users/:userId     Get user with specific ID
POST         /users          Create new user
PUT            /users/:id     Update user with specific ID
DELETE     /users/:id     Delete user with ID



MVC Pattern - Model View Controller

Model - used to interact with database
View - The page that is displayed to user(frontend) - ReactJS
Controller - Logic for the request


Model creation process:

i) Create schema(structure) for the model with fields and datatype. Validations optional.
ii) Using schema create the model and export it.


Flow of file creation:
Model -> Controller -> Routes -> server.js

Flow of request:
server.js -> Routes -> Controllers -> Using model inside controller




Authentication - Security (Login)
Authorization - Access control (Roles)

bcrypt - package used to encrypt the data. Using this package we can encrypt the password of the user. It is mandatory to encrypt the password of the user before storing in the database

JWT - JSON Web Token
jsonwebtoken

A token that is generated when the user is logged in with some unique data and a expiration time. If time expires the token is invalid. User needs to login again.


Environmental variables - storing data that needs to be secure
dotenv - package name
.env - file extension

bcrypt
jsonwebtoken
dotenv

npm install bcrypt jsonwebtoken dotenv



Cookies using:

npm install cookie-parser 

In server.js file:
const cookieParser = require('cookie-parser')

app.use(cookieparser())




Query: 

http://localhost:5000/api/products?search=mobile&minPrice=15000&maxPrice=20000&limit=3&page=1



Fetch for different methods:

POST methods:

fetch('http://localhost:5000/api/products', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ name: 'New Product', price: 99 })
});

GET method:

fetch('http://localhost:5000/api/products');

PUT method:

fetch(`http://localhost:5000/api/products/${id}`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ name: 'Updated Product', price: 120 })
});

DELETE methods:

fetch(`http://localhost:5000/api/products/${id}`, {
  method: 'DELETE'
});


Vercel.com


User, Seller, Admin, SuperAdmin




Page - 1 Limit - 5

page - 1 = previous pages * limit = skip


1 - 0 - ( 1-5)
2 - 5 - (6-10)
3 - 10 - (11-15)
4 - 15 - (16-20)

20 - 10 = 10 - 5 = 5

20 = 5 - 10 = -5 -> No products
20 = 10 - 5 = 5 


For initializing a new empty repository
git init

To add(stage) all file to local repository
git add .

To add a commit message to the changes
git commit -m "Any message here"

To add you email to system
git config user.email "email here inside double quotes"

To change name of branch master to main
git branch -M main

To add your remote repository to you local repository
git remote add origin GitHubrepo link

To push changes to remote repo
git push origin main

To clone a particular repo
git clone https://github.com/Naresh312143/ecom-backend-sankeshwar.git



git add .
git commit -m "Completed"
git push origin main



1 2 3 4 5

3 - remove

1 !== 3 -> true
2 !== 3 -> true
3 !== 3 -> False
4 !== 3 -> true
5 !== 3 -> true

1 2 4 5



npm install razorpay crypto

